<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.AspNet.JsonPatch</name>
    </assembly>
    <members>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Add operation.  Will result in, for example,
            { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">path</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Add value to list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">path</param>
            <param name="value">value</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Add``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            At value at end of list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">path</param>
            <param name="value">value</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Remove value at target location.  Will result in, for example,
            { "op": "remove", "path": "/a/b/c" }
            </summary>
            <param name="remove"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Remove value from list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Remove``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Remove value from end of list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Replace value.  Will result in, for example,
            { "op": "replace", "path": "/a/b/c", "value": 42 }
            </summary>
            <param name="path"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0,System.Int32)">
            <summary>
            Replace value in a list at given position
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <param name="position">position</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Replace``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},``0)">
            <summary>
            Replace value at end of a list
            </summary>
            <typeparam name="TProp">value type</typeparam>
            <param name="path">target location</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Removes value at specified location and add it to the target location.  Will result in, for example:
            { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            </summary>
            <param name="from"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Move from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Move from a position in a list to another location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Move``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Move to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy the value at specified location to the target location.  Willr esult in, for example:
            { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            </summary>
            <param name="from"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Copy from a position in a list to a new location
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a property to a location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32)">
            <summary>
            Copy from a position in a list to a new location in a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}},System.Int32,System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy from a position in a list to the end of another list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchDocument`1.Copy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.IList{``0}}})">
            <summary>
            Copy to the end of a list
            </summary>
            <typeparam name="TProp"></typeparam>
            <param name="from"></param>
            <param name="positionFrom"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Add(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
             The "add" operation performs one of the following functions,
             depending upon what the target location references:
            
             o  If the target location specifies an array index, a new value is
                inserted into the array at the specified index.
            
             o  If the target location specifies an object member that does not
                already exist, a new member is added to the object.
            
             o  If the target location specifies an object member that does exist,
                that member's value is replaced.
            
             The operation object MUST contain a "value" member whose content
             specifies the value to be added.
            
             For example:
            
             { "op": "add", "path": "/a/b/c", "value": [ "foo", "bar" ] }
            
             When the operation is applied, the target location MUST reference one
             of:
            
             o  The root of the target document - whereupon the specified value
                becomes the entire content of the target document.
            
             o  A member to add to an existing object - whereupon the supplied
                value is added to that object at the indicated location.  If the
                member already exists, it is replaced by the specified value.
            
             o  An element to add to an existing array - whereupon the supplied
                value is added to the array at the indicated location.  Any
                elements at or above the specified index are shifted one position
                to the right.  The specified index MUST NOT be greater than the
                number of elements in the array.  If the "-" character is used to
                index the end of the array (see [RFC6901]), this has the effect of
                appending the value to the array.
            
             Because this operation is designed to add to existing objects and
             arrays, its target location will often not exist.  Although the
             pointer's error handling algorithm will thus be invoked, this
             specification defines the error handling behavior for "add" pointers
             to ignore that error and add the value as specified.
            
             However, the object itself or an array containing it does need to
             exist, and it remains an error for that not to be the case.  For
             example, an "add" with a target location of "/a/b" starting with this
             document:
            
             { "a": { "foo": 1 } }
            
             is not an error, because "a" exists, and "b" will be added to its
             value.  It is an error in this document:
            
             { "q": { "bar": 2 } }
            
             because "a" does not exist.
             </summary>
             <param name="operation">The add operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Add(System.String,System.Object,`0,Microsoft.AspNet.JsonPatch.Operations.Operation{`0})">
            <summary>
            Add is used by various operations (eg: add, copy, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Move(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
             The "move" operation removes the value at a specified location and
             adds it to the target location.
            
             The operation object MUST contain a "from" member, which is a string
             containing a JSON Pointer value that references the location in the
             target document to move the value from.
            
             The "from" location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "move", "from": "/a/b/c", "path": "/a/b/d" }
            
             This operation is functionally identical to a "remove" operation on
             the "from" location, followed immediately by an "add" operation at
             the target location with the value that was just removed.
            
             The "from" location MUST NOT be a proper prefix of the "path"
             location; i.e., a location cannot be moved into one of its children.
             </summary>
             <param name="operation">The move operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Remove(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
             The "remove" operation removes the value at the target location.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "remove", "path": "/a/b/c" }
            
             If removing an element from an array, any elements above the
             specified index are shifted one position to the left.
             </summary>
             <param name="operation">The remove operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Remove(System.String,`0,Microsoft.AspNet.JsonPatch.Operations.Operation{`0})">
            <summary>
            Remove is used by various operations (eg: remove, move, ...), yet through different operations;
            This method allows code reuse yet reporting the correct operation on error
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Test(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
             The "test" operation tests that a value at the target location is
             equal to a specified value.
            
             The operation object MUST contain a "value" member that conveys the
             value to be compared to the target location's value.
            
             The target location MUST be equal to the "value" value for the
             operation to be considered successful.
            
             Here, "equal" means that the value at the target location and the
             value conveyed by "value" are of the same JSON type, and that they
             are considered equal by the following rules for that type:
            
             o  strings: are considered equal if they contain the same number of
                Unicode characters and their code points are byte-by-byte equal.
            
             o  numbers: are considered equal if their values are numerically
                equal.
            
             o  arrays: are considered equal if they contain the same number of
                values, and if each value can be considered equal to the value at
                the corresponding position in the other array, using this list of
                type-specific rules.
            
             o  objects: are considered equal if they contain the same number of
                members, and if each member can be considered equal to a member in
                the other object, by comparing their keys (as strings) and their
                values (using this list of type-specific rules).
            
             o  literals (false, true, and null): are considered equal if they are
                the same.
            
             Note that the comparison that is done is a logical comparison; e.g.,
             whitespace between the member values of an array is not significant.
            
             Also, note that ordering of the serialization of object members is
             not significant.
            
             Note that we divert from the rules here - we use .NET's comparison,
             not the one above.  In a future version, a "strict" setting might
             be added (configurable), that takes into account above rules.
            
             For example:
            
             { "op": "test", "path": "/a/b/c", "value": "foo" }
             </summary>
             <param name="operation">The test operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Replace(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
             The "replace" operation replaces the value at the target location
             with a new value.  The operation object MUST contain a "value" member
             whose content specifies the replacement value.
            
             The target location MUST exist for the operation to be successful.
            
             For example:
            
             { "op": "replace", "path": "/a/b/c", "value": 42 }
            
             This operation is functionally identical to a "remove" operation for
             a value, followed immediately by an "add" operation at the same
             location with the replacement value.
            
             Note: even though it's the same functionally, we do not call remove + add
             for performance reasons (multiple checks of same requirements).
             </summary>
             <param name="operation">The replace operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.Adapters.ObjectAdapter`1.Copy(Microsoft.AspNet.JsonPatch.Operations.Operation{`0},`0)">
             <summary>
              The "copy" operation copies the value at a specified location to the
              target location.
            
              The operation object MUST contain a "from" member, which is a string
              containing a JSON Pointer value that references the location in the
              target document to copy the value from.
            
              The "from" location MUST exist for the operation to be successful.
            
              For example:
            
              { "op": "copy", "from": "/a/b/c", "path": "/a/b/e" }
            
              This operation is functionally identical to an "add" operation at the
              target location using the value specified in the "from" member.
            
              Note: even though it's the same functionally, we do not call add with
              the value specified in from for performance reasons (multiple checks of same requirements).
             </summary>
             <param name="operation">The copy operation</param>
             <param name="objectApplyTo">Object to apply the operation to</param>
        </member>
        <member name="T:Microsoft.AspNet.JsonPatch.JsonPatchProperty">
            <summary>
            Metadata for JsonProperty.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.JsonPatch.JsonPatchProperty.#ctor(Newtonsoft.Json.Serialization.JsonProperty,System.Object)">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.JsonPatch.JsonPatchProperty.Property">
            <summary>
            Gets or sets JsonProperty.
            </summary>
        </member>
        <member name="P:Microsoft.AspNet.JsonPatch.JsonPatchProperty.Parent">
            <summary>
            Gets or sets Parent.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Encodings.UTF8EncodingWithoutBOM">
            <summary>
            Returns UTF8 Encoding without BOM and throws on invalid bytes.
            </summary>
        </member>
        <member name="F:Microsoft.AspNet.Mvc.Encodings.UTF16EncodingLittleEndian">
            <summary>
            Returns UTF16 Encoding which uses littleEndian byte order with BOM and throws on invalid bytes.
            </summary>
        </member>
        <member name="T:Microsoft.AspNet.Mvc.TaskHelper">
            <summary>
            Utility methods for dealing with <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TaskHelper.WaitAndThrowIfFaulted(System.Threading.Tasks.Task)">
            <summary>
            Waits for the task to complete and throws the first faulting exception if the task is faulted.
            It preserves the original stack trace when throwing the exception.
            </summary>
            <remarks>
            Invoking this method is equivalent to calling Wait() on the <paramref name="task" /> if it is not completed.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TaskHelper.WaitAndThrowIfFaulted``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Waits for the task to complete and throws the first faulting exception if the task is faulted.
            It preserves the original stack trace when throwing the exception.
            </summary>
            <remarks>
            Invoking this method is equivalent to calling <see cref="P:System.Threading.Tasks.Task`1.Result"/> on the
            <paramref name="task"/> if it is not completed.
            </remarks>
        </member>
        <member name="M:Microsoft.AspNet.Mvc.TypeHelper.ObjectToDictionary(System.Object)">
             <summary>
             Given an object, adds each instance property with a public get method as a key and its
             associated value to a dictionary.
            
             If the object is already an <see cref="T:System.Collections.Generic.IDictionary`2"/> instance, then a copy
             is returned.
             </summary>
             <remarks>
             The implementation of PropertyHelper will cache the property accessors per-type. This is
             faster when the the same type is used multiple times with ObjectToDictionary.
             </remarks>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a fast <see cref="T:Microsoft.Framework.Internal.PropertyHelper"/>.
            This constructor does not cache the helper. For caching, use <see cref="M:Microsoft.Framework.Internal.PropertyHelper.GetProperties(System.Object)"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.GetProperties(System.Object)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            underlying type.
            </summary>
            <param name="instance">the instance to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the underlying type of target instance.
            </returns>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.GetProperties(System.Type)">
            <summary>
            Creates and caches fast property helpers that expose getters for every public get property on the
            specified type.
            </summary>
            <param name="type">the type to extract property accessors for.</param>
            <returns>a cached array of all public property getters from the type of target instance.
            </returns>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.GetVisibleProperties(System.Object)">
            <summary>
            <para>
            Creates and caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:Microsoft.Framework.Internal.PropertyHelper.GetVisibleProperties(System.Object)"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="instance">The instance to extract property accessors for.</param>
            <returns>
            A cached array of all public property getters from the instance's type.
            </returns>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.GetVisibleProperties(System.Type)">
            <summary>
            <para>
            Creates a caches fast property helpers that expose getters for every non-hidden get property
            on the specified type.
            </para>
            <para>
            <see cref="M:Microsoft.Framework.Internal.PropertyHelper.GetVisibleProperties(System.Object)"/> excludes properties defined on base types that have been
            hidden by definitions using the <c>new</c> keyword.
            </para>
            </summary>
            <param name="type">The type to extract property accessors for.</param>
            <returns>
            A cached array of all public property getters from the type.
            </returns>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.MakeFastPropertyGetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property getter. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the getter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed.
            </remarks>
        </member>
        <member name="M:Microsoft.Framework.Internal.PropertyHelper.MakeFastPropertySetter(System.Reflection.PropertyInfo)">
            <summary>
            Creates a single fast property setter for reference types. The result is not cached.
            </summary>
            <param name="propertyInfo">propertyInfo to extract the setter for.</param>
            <returns>a fast getter.</returns>
            <remarks>
            This method is more memory efficient than a dynamically compiled lambda, and about the
            same speed. This only works for reference types.
            </remarks>
        </member>
    </members>
</doc>
